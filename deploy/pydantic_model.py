from typing import Optional
from pydantic import BaseModel, root_validator
from enum import Enum


class TypeEnum(str, Enum):
    excluded = 'excluded'
    included = 'included'


class CpeFilter(BaseModel):
    cpe_product_match: Optional[str]
    cpe_vendor_match: Optional[str]
    cpe_version_match: Optional[str]
    cpe_target_software_match: Optional[str]

    @root_validator
    def check_at_least_one(cls, values):
        if all([values.get(key) is None for key in values.keys()]):
            raise ValueError('Requires at least one field to be set')
        return values


class AppBundleFilter(BaseModel):
    application_name_match: Optional[str]
    application_version_match: Optional[str]
    application_vendor_match: Optional[str]

    @root_validator
    def check_at_least_one(cls, values):
        if all([values.get(key) is None for key in values.keys()]):
            raise ValueError('Requires at least one field to be set')
        return values


class VulnerabilityMatchingRule(BaseModel):
    cpe_filter: CpeFilter
    app_bundle_filter: AppBundleFilter
    rule_type: TypeEnum
