import argparse
import os
import orjson
from pydantic import ValidationError

from pydantic_model import *
from pprint import pprint


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("rules_path")
    parser.add_argument("schema_path")
    args = parser.parse_args()

    rules = []
    for location in sorted(os.listdir(args.rules_path), key=lambda l: int(l.split('_')[-1].rstrip('.json'))):
        with open(f"{args.rules_path}/{location}") as f:
            rules.append((orjson.loads(f.read()), location))

    invalid_rules = []
    rules_check = []
    duplicate_rules = []
    # check rules
    for r, f in rules:
        try:
            pydantic_obj = VulnerabilityMatchingRule.parse_obj(r)
            found_existing_rule = False
            for existing_rule_tuple in rules_check:
                if pydantic_obj == existing_rule_tuple[0]:
                    duplicate_rules.append({f: f"Rule is a duplicate of rule {existing_rule_tuple[1]}"})
                    found_existing_rule = True

            if not found_existing_rule:
                rules_check.append((pydantic_obj, f))

        except ValidationError as e:
            invalid_rules.append({f: str(e)})

    if invalid_rules or duplicate_rules:
        print("Invalid rules:")
        pprint(invalid_rules)
        print("Duplicate rules:")
        pprint(duplicate_rules)
        exit(1)


if __name__ == "__main__":
    main()
