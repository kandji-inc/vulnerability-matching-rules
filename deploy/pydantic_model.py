from typing import Optional
from pydantic import BaseModel, root_validator
from enum import Enum


class FilterTypeEnum(str, Enum):
    excluded = "excluded"
    included = "included"


class CpeFilter(BaseModel):
    product: Optional[str]
    vendor: Optional[str]
    version: Optional[str]
    target_software: Optional[str]

    @root_validator
    def check_at_least_one(cls, values):
        if all([values.get(key) is None for key in values.keys()]):
            raise ValueError("Requires at least one field to be set")
        return values


class AppBundleFilter(BaseModel):
    application_name: Optional[str]
    version: Optional[str]
    vendor_name: Optional[str]
    bundle_identifier: Optional[str]

    @root_validator
    def check_at_least_one(cls, values):
        if all([values.get(key) is None for key in values.keys()]):
            raise ValueError("Requires at least one field to be set")
        return values


class VulnerabilityMatchingRule(BaseModel):
    rule_type: FilterTypeEnum
    cpe_filter: CpeFilter
    app_bundle_filter: AppBundleFilter
    description: Optional[str]
